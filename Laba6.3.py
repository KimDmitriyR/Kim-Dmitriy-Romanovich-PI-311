# -*- coding: utf-8 -*-
"""Копия блокнота "Laba6_3.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13vkJLQ8LE8THslmfVNURBdXVGpMM0KJv
"""

import matplotlib.pyplot as plt
import numpy as np

#Процент продуктов в салате оливье 
labels = ['Майонез','Картошка','Горошек ', 'Огурчики', 'Колбаска']
values = [15,30,20,15,20]
colors = ['yellow','green','red','blue', 'black']
plt.pie(values,labels=labels,colors=colors)
plt.axis('equal')
plt.show()

#Продажи пива в разные дни недели
index = np.arange(6)
values1 = [6,1,2,3,8,15]
plt.title('Продажи пива ')
plt.bar(index, values1, label='Литры')
plt.xticks(index+0.4,['Понедельник','Bторник','Cреда','Четверг','Пятница','Выходные'])
plt.legend(loc=2)
plt.show()

#Баллы учеников по Введению  в специальность
index = np.arange(5)
values1 = [100,7,3,4,6]
plt.title('ПИ 311')
plt.barh(index, values1, label='Баллы')
plt.yticks(index+0.4,['Ким Дмитрий','Кто-то_1','Кто-то_2','Кто-то_3','Кто-то_4'])
plt.legend()
plt.show()

kelvin = [[200], [220], [250], [280], [300]]
fahrenheit = [[-99.6], [-63.6], [-9.6], [44.3], [80.3]]

import matplotlib.pyplot as plt
plt.figure(figsize=(15,8), dpi=50)
plt.scatter(kelvin, fahrenheit, label='входные данные', color='green', marker='$f$');
plt.xlabel('kelvin')
plt.ylabel('fahrenheit')
plt.legend()
plt.grid(True)
plt.show()

for c,f in zip(kelvin, fahrenheit):
  print(f'кельвин{c}= фаренгейт {f}')

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(kelvin, fahrenheit)
lr.predict([[256], [123]])
lr.coef_
lr.intercept_
kelvin_test = [[-50], [10], [30], [20], [10], [70], [87]]
fahrenheit_test = lr.predict(kelvin_test)
fahrenheit_test

import numpy as np
x_range = np.arange(-70, 120)
y_range = (x_range-273)*9/5+32
plt.figure(figsize=(15,8), dpi=280)
plt.plot(x_range, y_range, label='уравнение', linewidth='1')
plt.scatter(x_range, y_range, label='входные данные', color='green')
plt.scatter(kelvin_test, fahrenheit_test, label='предсказанное значение', color='blue')
plt.xlabel('Кельвин')
plt.ylabel('Фаренгейта')
plt.legend()
plt.grid(True)
plt.show()

import math
math.e

math.pi

math.nan

math.factorial(8)

math.gcd(13, 128)

import tensorflow as tf

image_data = tf.keras.datasets.fashion_mnist

from sys import platform
(train_images,train_labels),(test_images,test_labels) = image_data.load_data()

import matplotlib.pyplot as plt

plt.imshow(train_images[2]) #Данные должны быть предварительно обработаны перед обучением сети для этого масштабируйум эти значения в диапазоне от 0 до 1.

(train_images,train_labels),(test_images,test_labels) = image_data.load_data()
train_images = train_images / 255.0
test_images = test_images / 255.0
train_images[0]      #Загрузка набора данных возвращает четыре массива "train_images train_images test_images test_images"

model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape =(28,28)),
    tf.keras.layers.Dense(128,activation="relu"),
    tf.keras.layers.Dense(10)
])
#tf.keras.Sequential Последовательная группировка линейного стека модулей
#tf.keras.layers является модулем; Dense and Flatten имеют параметры которые я нашел в интренете (._. ')

model.compile(optimizer="adam",
               loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
               metrics=["accuracy"]
)
#tf.keras.losses измеряет, насколько точна модель во время обучения
#optimizer="adam" менно так модель обновляется на основе данных, которые она видит, и ее функции потерь.
#metrics используется для мониторинга этапов обучения и тестирования
model.fit(train_images,train_labels,epochs=10)

model.predict(test_images)[0]
test_labels[0]
# train_images и train_labels представляют собой обучающий набор — данные, которые модель использует для обучения.